<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Serial</name>
    </assembly>
    <members>
        <member name="T:NeopixelSDK.DataRecievedEventArgs">
            <summary>
            Event arguments associated with the Serial Class
            </summary>
        </member>
        <member name="M:NeopixelSDK.DataRecievedEventArgs.#ctor(System.String)">
            <summary>
            Event arguments associated with the Serial class
            </summary>
            <param name="msg">The message received on the serial port</param>
        </member>
        <member name="M:NeopixelSDK.DataRecievedEventArgs.#ctor(System.String,System.DateTime)">
            <summary>
            Event arguments associated with the Serial class
            </summary>
            <param name="msg">The message received on the serial port</param>
            <param name="time">The time the message was received</param>
        </member>
        <member name="P:NeopixelSDK.DataRecievedEventArgs.Message">
            <summary>
            Gets the latest message received by the serial port
            </summary>
        </member>
        <member name="P:NeopixelSDK.DataRecievedEventArgs.Length">
            <summary>
            Gets the length of the latest message received by the serial port
            </summary>
        </member>
        <member name="P:NeopixelSDK.DataRecievedEventArgs.Timestamp">
            <summary>
            Gets the time the latest message was received
            </summary>
        </member>
        <member name="T:NeopixelSDK.DataReceiveEventHandler">
            <summary>
            Event is triggered with the serial port has received more bytes then the specified threshold
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:NeopixelSDK.Serial">
            <summary>
            Creates and opens a new connection to the serial port
            </summary>
        </member>
        <member name="M:NeopixelSDK.Serial.#ctor">
            <summary>
            Makes a new port connection without a port associated with it
            </summary>
        </member>
        <member name="M:NeopixelSDK.Serial.#ctor(System.String)">
            <summary>
            Makes a new port connection using 9600 baud and 8N1
            </summary>
            <param name="port">The name of the port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.#ctor(System.String,NeopixelSDK.Serial.BaudRateEnum)">
            <summary>
            Makes a new port connection using 8N1
            </summary>
            <param name="port">The name of the port</param>
            <param name="baud">The baud rate</param>
        </member>
        <member name="M:NeopixelSDK.Serial.#ctor(System.String,NeopixelSDK.Serial.BaudRateEnum,System.IO.Ports.Handshake,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits,System.Int32,System.Int32)">
            <summary>
            Make a fully customized port connection
            </summary>
            <param name="port">The name of the port</param>
            <param name="baud">The baud rate</param>
            <param name="shake">The shake method</param>
            <param name="parity">The parity method</param>
            <param name="dataBits">The number of bits per piece of data</param>
            <param name="stopBits">The stop bit</param>
            <param name="readTimeout">The timeout, in milliseconds, before a receive operation terminates</param>
            <param name="writeTimeout">The timeout, in milliseconds, before a send operation terminates</param>
        </member>
        <member name="M:NeopixelSDK.Serial.createSerialPort(System.String,NeopixelSDK.Serial.BaudRateEnum,System.IO.Ports.Handshake,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits,System.Int32,System.Int32)">
            <summary>
            The universal serial port creator
            </summary>
            <param name="port">The name of the port</param>
            <param name="baud">The baud rate</param>
            <param name="shake">The shake method</param>
            <param name="parity">The parity method</param>
            <param name="dataBits">The number of bits per piece of data</param>
            <param name="stopBits">The stop bit</param>
            <param name="readTimeout">The timeout, in milliseconds, before a receive operation terminates</param>
            <param name="writeTimeout">The timeout, in milliseconds, before a send operation terminates</param>
        </member>
        <member name="M:NeopixelSDK.Serial.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NeopixelSDK.Serial.Open">
            <summary>
            Opens the serial port connection
            </summary>
            <returns>if the connection was successful</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.Close">
            <summary>
            Closes the serial port connection
            </summary>
        </member>
        <member name="M:NeopixelSDK.Serial.DiscardReceiveBuffer">
            <summary>
            Clears the received data buffer
            </summary>
            <returns>if the buffer was successfully cleared</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.DiscardSendBuffer">
            <summary>
            Clears the buffer of data to send
            </summary>
            <returns>if the buffer was successfully cleared</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.IntToBaud(System.Int32)">
            <summary>
            Converts an integer to a baud rate
            </summary>
            <param name="baud">The integer to be converted</param>
            <returns>The integer as a BaudRateEnum</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.BaudToInt(NeopixelSDK.Serial.BaudRateEnum)">
            <summary>
            Converts a baud rate to an integer
            </summary>
            <param name="baud">The baud rate to be converted</param>
            <returns>The baud rate as an integer</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.OnReceived(NeopixelSDK.DataRecievedEventArgs)">
            <summary>
            Executes the Received event
            </summary>
            <param name="e">Arguments associated with the event</param>
        </member>
        <member name="M:NeopixelSDK.Serial.receive(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            The SerialPort class event for received bytes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveAsync">
            <summary>
            Asynchronously receives data from the serial port, until the pre-set threshold is met
            </summary>
            <returns>If data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveAsync(System.Int32)">
            <summary>
            Asynchronously receives data from the serial port, until the specified threshold is met
            </summary>
            <param name="threshold">The number of bytes to receive before returning</param>
            <returns>If data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveToAsync(System.String)">
            <summary>
            Asynchronously receives data from the serial port, until the specified string has been received
            </summary>
            <param name="delimiter">The string to receive till</param>
            <returns>If data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveNewLineAsync">
            <summary>
            Receives characters until the system's new line characters has been reached.
            "\r\n" for non-Unix and "\n" for Unix
            </summary>
            <returns>If the new data up upto the new line character</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveByteAsync">
            <summary>
            Asynchronously receives one byte from the serial port
            </summary>
            <returns>The byte that was received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveCharAsync">
            <summary>
            Asynchronously receives one ASCII character from the serial port
            </summary>
            <returns>The char that was received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.SendDataAsync(System.Byte[])">
            <summary>
            Asynchronously sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.SendDataAsync(System.Int32[])">
            <summary>
            Asynchronously sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.SendDataAsync(System.String)">
            <summary>
            Asynchronously sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.SendDataAsync(System.Char[])">
            <summary>
            Asynchronously sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
            <returns>The asynchronous task</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.Receive">
            <summary>
            Receives data from the serial port, until the pre-set threshold is met
            </summary>
            <returns>If data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.Receive(System.Int32)">
            <summary>
            Receives data from the serial port, until the specified threshold is met
            </summary>
            <param name="threshold">The number of bytes to receive before returning</param>
            <returns>If data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveTo(System.String)">
            <summary>
            Receives data from the serial port, until the specified string has been received
            </summary>
            <param name="delimiter">The string to receive till</param>
            <returns>If data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveByte">
            <summary>
            Receives one byte from the serial port
            </summary>
            <returns>The byte that was received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveChar">
            <summary>
            Receives one ASCII character from the serial port
            </summary>
            <returns>The char that was received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.ReceiveNewLine">
            <summary>
            Receives characters until the system's new line characters has been reached.
            "\r\n" for non-Unix and "\n" for Unix
            </summary>
            <returns>If the new data up upto the new line character</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.SendData(System.Byte[])">
            <summary>
            Sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.SendData(System.Byte)">
            <summary>
            Sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.SendData(System.Int32[])">
            <summary>
            Sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.SendData(System.String)">
            <summary>
            Sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.SendData(System.Char[])">
            <summary>
            Sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.SendData(System.Char)">
            <summary>
            Sends data through the serial port
            </summary>
            <param name="data">The data to send to the serial port</param>
        </member>
        <member name="M:NeopixelSDK.Serial.receiveAsyncRunner">
            <summary>
            Does the work that the task sets forth, for a pre-set threshold
            </summary>
            <returns>if data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.receiveAsyncNumberRunner(System.Int32)">
            <summary>
            Does the work that the task sets forth, for a specified threshold
            </summary>
            <param name="threshold">The number of bytes to receive before returning</param>
            <returns>if data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.receiveToAsyncRunner(System.String)">
            <summary>
            Does the work that the task sets forth, until the delimiter is received
            </summary>
            <param name="delimiter">The string to receive till</param>
            <returns>if data was successfully received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.receiveNewLineAsyncRunner">
            <summary>
            The task for running a read up to a new line character
            </summary>
            <returns>If the new line was received</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.sendDataRunner(System.Object)">
            <summary>
            Does the work that the task sets forth
            </summary>
            <param name="data">The data to send to the serial port</param>
            <returns>if the data was successfully sent</returns>
        </member>
        <member name="M:NeopixelSDK.Serial.sendStringRunner(System.String)">
            <summary>
            Does the work that the task sets forth
            </summary>
            <param name="data">The string to send to the serial port</param>
            <returns>if the data was successfully sent</returns>
        </member>
        <member name="P:NeopixelSDK.Serial.IsOpen">
            <summary>
            Gets the status of the port connection
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.PortName">
            <summary>
            Gets or sets the name of the port to connect to
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.ReceivedMessage">
            <summary>
            Gets the messages received over the serial connection
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.MessageBuffer">
            <summary>
            Gets or sets the message buffer
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.LastReceivedMessage">
            <summary>
            Gets the previously received message
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.ReceivedBytesThreshold">
            <summary>
            Gets or sets the number of bytes to receive before an event is triggered
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.AvailablePorts">
            <summary>
            Gets the serial ports available on the current machine
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.EnableEvents">
            <summary>
            Gets or sets if events should be used in the class
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.BytesToReceive">
            <summary>
            Gets the number of bytes in the receive buffer
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.BytesToSend">
            <summary>
            Gets the number of bytes in the send buffer
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.DiscardNull">
            <summary>
            Gets or sets whether the port should disregard null characters
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.BaudRate">
            <summary>
            Gets or sets the baud rate
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.Handshake">
            <summary>
            Gets or set the serial port handshake method
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.Parity">
            <summary>
            Gets or set the serial port parity
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.StopBits">
            <summary>
            Get or sets the serial port stop bit
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.ReadTimeout">
            <summary>
            Gets or set the serial port receive timeout
            </summary>
        </member>
        <member name="P:NeopixelSDK.Serial.WriteTimeout">
            <summary>
            Gets or set the serial port send timeout
            </summary>
        </member>
        <member name="E:NeopixelSDK.Serial.Received">
            <summary>
            Event that is called when the number of bytes in the receive buffer reaches the threshold set
            </summary>
        </member>
        <member name="T:NeopixelSDK.Serial.BaudRateEnum">
            <summary>
            Possible baud rates to communicate at
            </summary>
        </member>
    </members>
</doc>
